###Version Control System (VCS) & Git Fundamentals

##VCS Core Concepts

This section covers the basics of a Version Control System.

    A repository is like a database that stores files and tracks changes.

    You can view history (who made changes, when).

    You can revert to earlier versions.

    VCS makes it easy to track versions and work together.

##Types of VCS

###Centralized (CVCS)

    Shared repository on a single server.

    Problem: ~~Single point of failure~~ if the server goes down.

###Distributed (DVCS)

    Each user has a full copy of the project locally.

    Work offline, then sync with others.

    No single point of failure.

##Why Git?

Git is the most widely used Distributed VCS.

    Free & Open Source

    Super fast & scalable

    Widely used, important for jobs

    Makes collaboration and history tracking easy

##Using Git

Ways to interact with Git:

    Command Line (CLI) → Best and always available

    IDEs (like VS Code) → Built-in Git support

    Extensions: GitLens for VS Code

    GUIs: GitKraken, SourceTree

    Tip: Use CLI mainly, GUI when needed for speed

##Installing & Configuring Git

###Installation

    Check version: git --version

    On Windows: Git Bash is preferred over default CMD

###Configuration Levels

    System - All users

    Global - All repos of current user

    Local - Only current repo

###Setting User Identity

Bash

# Set username and email globally
git config --global user.name "Your Name"
git config --global user.email "youremail@example.com"

Handling End of Line (EOL)

Windows uses \r\n; Mac/Linux uses \n.
Bash

# For Windows:
git config --global core.autocrlf true

# For Mac/Linux:
git config --global core.autocrlf input

Getting Help

Bash

git config --help
# Or
git config -h

##Basic Git Workflow

###Initializing a Repo

Bash

git init
# Creates .git hidden folder
# WARNING: Deleting .git removes history!

The Three States

Local Project → Staging Area → Repository

    Staging = Prepare and review changes

    Commit = Save snapshot to repository

###Staging and Committing

Bash

# Add file(s) to the staging area
git add file1 file2

# Commit the staged changes
git commit -m "Meaningful message"

###Tracking Files

Symbols in git status:

    ?? = Untracked file

    A or M (yellow) = Staged but not committed

    Green = Synced with repo

Bash

# Check status
git status

# Check status (short view)
git status -s

File Operations

###Removing a File

Bash

# Removes file locally AND stages the removal
git rm filename

###Renaming/Moving a File

Bash

# Renames/moves file locally AND stages the change
git mv old_filename new_filename

###Ignoring Files

1. Create .gitignore

Create a file named .gitignore in the repository root.

2. Add Rules

# Example rules in .gitignore
/directory_name
*.log

3. Remove Already Tracked Files

If files were accidentally tracked, remove them from the repository's tracking without deleting the local file:
Bash

# Remove from repo/staging, but keep the local file
git rm --cached -r /directory_name

# Commit the change to apply the ignore rule
git commit -m "Ignored specified files"

###Best Practices

    Commit often

    Use meaningful commit messages (present tense, e.g., "Fix bug X")

    Stage changes clearly

    Mix CLI and GUI as needed
